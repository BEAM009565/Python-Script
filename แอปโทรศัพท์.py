"""
‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ü‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö
"""

import toga
from toga.style import Pack
from toga.style.pack import COLUMN, ROW
from datetime import datetime

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
def get_thai_month(month):
    thai_months = [
        "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    ]
    return thai_months[month - 1]

class ‡∏Ñ‡πç‡∏≤‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏(toga.App):
    def startup(self):
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
        self.name = "‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ü‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö"

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å
        main_box = toga.Box(style=Pack(direction=COLUMN, padding=10))

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ü‡∏ô (‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢)
        birthday_button_male = toga.Button(
            "üéÇ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ü‡∏ô (‡∏ä‡∏≤‡∏¢)",
            on_press=self.calculate_birthday_male,
            style=Pack(margin=5)
        )
        main_box.add(birthday_button_male)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ü‡∏ô (‡∏´‡∏ç‡∏¥‡∏á)
        birthday_button = toga.Button(
            "üéÇ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ü‡∏ô (‡∏´‡∏ç‡∏¥‡∏á)",
            on_press=self.calculate_birthday,
            style=Pack(margin=5)
        )
        main_box.add(birthday_button)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö
        anniversary_button = toga.Button(
            "üíò ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö",
            on_press=self.calculate_anniversary,
            style=Pack(margin=5)
        )
        main_box.add(anniversary_button)

        # ‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.result_label = toga.Label("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà", style=Pack(margin=5))
        main_box.add(self.result_label)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
        self.main_window = toga.MainWindow(title=self.name)
        self.main_window.content = main_box
        self.main_window.show()

    def calculate_birthday_male(self, widget):
        try:
            # ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ü‡∏ô (‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢)
            birthday = datetime.strptime("2004-10-28", "%Y-%m-%d")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô 28 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2004
            today = datetime.today()
            delta = today - birthday
            years = today.year - birthday.year - ((today.month, today.day) < (birthday.month, birthday.day))
            months = (today.year - birthday.year) * 12 + today.month - birthday.month - (today.day < birthday.day)
            days = delta.days
            minutes = delta.total_seconds() // 60

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_birthday = datetime(today.year, birthday.month, birthday.day)
            if today > next_birthday:
                next_birthday = datetime(today.year + 1, birthday.month, birthday.day)
            remaining_delta = next_birthday - today
            remaining_months = remaining_delta.days // 30
            remaining_days = remaining_delta.days % 30

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_anniversary = datetime(today.year, birthday.month, birthday.day)
            if today > next_anniversary:
                next_anniversary = datetime(today.year + 1, birthday.month, birthday.day)
            next_anniversary_years = next_anniversary.year - birthday.year

            self.result_label.text = (
                f"üéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ü‡∏ô (‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢): 28 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2004\n"
                f"üë¶ ‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏ü‡∏ô: {years} ‡∏õ‡∏µ\n"
                f"üìÜ ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n"
                f"üï∞ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {days} ‡∏ß‡∏±‡∏ô\n"
                f"‚è± ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {int(minutes):,} ‡∏ô‡∏≤‡∏ó‡∏µ\n\n"
                f"üéâ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å: {remaining_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {remaining_days} ‡∏ß‡∏±‡∏ô\n"
                f"‚ú® ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ({next_birthday.strftime('%d')} {get_thai_month(next_birthday.month)} {next_birthday.year})"
            )
            self.result_label.text += f"\nüéä ‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö {next_anniversary_years} ‡∏õ‡∏µ"
            print(f"Today: {today}, Birthday: {birthday}, Next Birthday: {next_birthday}")
        except Exception as e:
            self.result_label.text = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"


    def calculate_birthday(self, widget):
        try:
            # ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ü‡∏ô
            birthday = datetime.strptime("2007-12-12", "%Y-%m-%d")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô 12 ‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏° 2007
            today = datetime.today()
            delta = today - birthday
            years = today.year - birthday.year - ((today.month, today.day) < (birthday.month, birthday.day))
            months = (today.year - birthday.year) * 12 + today.month - birthday.month - (today.day < birthday.day)
            days = delta.days
            minutes = delta.total_seconds() // 60

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_birthday = datetime(today.year, birthday.month, birthday.day)
            if today > next_birthday:
                next_birthday = datetime(today.year + 1, birthday.month, birthday.day)
            remaining_delta = next_birthday - today
            remaining_months = remaining_delta.days // 30
            remaining_days = remaining_delta.days % 30

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_anniversary = datetime(today.year, birthday.month, birthday.day)
            if today > next_anniversary:
                next_anniversary = datetime(today.year + 1, birthday.month, birthday.day)
            next_anniversary_years = next_anniversary.year - birthday.year

            self.result_label.text = (
                f"üéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ü‡∏ô: 12 ‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏° 2007\n"
                f"üëß ‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏ü‡∏ô: {years} ‡∏õ‡∏µ\n"
                f"üìÜ ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n"
                f"üï∞ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {days} ‡∏ß‡∏±‡∏ô\n"
                f"‚è± ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {int(minutes):,} ‡∏ô‡∏≤‡∏ó‡∏µ\n\n"
                f"üéâ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å: {remaining_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {remaining_days} ‡∏ß‡∏±‡∏ô\n"
                f"‚ú® ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ({next_birthday.strftime('%d')} {get_thai_month(next_birthday.month)} {next_birthday.year})"
            )
            self.result_label.text += f"\nüéä ‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö {next_anniversary_years} ‡∏õ‡∏µ"
            print(f"Today: {today}, Birthday: {birthday}, Next Birthday: {next_birthday}")
        except Exception as e:
            self.result_label.text = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"

    def calculate_anniversary(self, widget):
        try:
            # ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö
            anniversary = datetime.strptime("2023-01-07", "%Y-%m-%d")
            today = datetime.today()
            delta = today - anniversary

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏µ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô
            years = today.year - anniversary.year
            months = today.month - anniversary.month
            days = today.day - anniversary.day
            if days < 0:
                months -= 1
                days += (datetime(today.year, today.month, 1) - datetime(today.year, today.month - 1, 1)).days
            if months < 0:
                years -= 1
                months += 12

            total_months = years * 12 + months  # ‡∏£‡∏ß‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            total_days = delta.days
            total_minutes = delta.total_seconds() // 60

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_anniversary = datetime(today.year, anniversary.month, anniversary.day)
            if today > next_anniversary:
                next_anniversary = datetime(today.year + 1, anniversary.month, anniversary.day)
            remaining_delta = next_anniversary - today
            remaining_months = remaining_delta.days // 30
            remaining_days = remaining_delta.days % 30

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö‡πÉ‡∏ô‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_anniversary_years = next_anniversary.year - anniversary.year

            self.result_label.text = (
                f"üíò ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö: 7 {get_thai_month(1)} 2023\n"
                f"üë´ ‡∏Ñ‡∏ö‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß: {years} ‡∏õ‡∏µ {months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {days} ‡∏ß‡∏±‡∏ô\n"
                f"üìÜ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_days} ‡∏ß‡∏±‡∏ô\n"
                f"üìÖ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n"
                f"‚è± ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {int(total_minutes):,} ‡∏ô‡∏≤‡∏ó‡∏µ\n\n"
                f"üéâ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å: {remaining_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {remaining_days} ‡∏ß‡∏±‡∏ô\n"
                f"‚ú® ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ({next_anniversary.strftime('%d')} {get_thai_month(next_anniversary.month)} {next_anniversary.year})\n"
                f"üéä ‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö {next_anniversary_years} ‡∏õ‡∏µ"
            )
        except Exception as e:
            self.result_label.text = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"


def main():
    return ‡∏Ñ‡πç‡∏≤‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ü‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö")
