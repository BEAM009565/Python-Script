# üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
import subprocess
import sys
import importlib

def install_and_check(package_name, import_name=None):
    try:
        importlib.import_module(import_name or package_name)
        print(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ {package_name} ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°")
    except ImportError:
        print(f"üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ {package_name} ... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà")
        subprocess.check_call([sys.executable, "-m", "pip", "install", package_name])
        print(f"üéâ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {package_name} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß!")

required_packages = [
    ("pyautogui", "pyautogui"),
    ("pynput", "pynput")
]

for pkg, imp in required_packages:
    install_and_check(pkg, imp)













import os
import time
import threading
import pyautogui
import tkinter as tk
from tkinter import messagebox, ttk
from pynput import keyboard, mouse
import json

LOG_DIR = r"C:\app Gu\‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å"
LOG_FILE = os.path.join(LOG_DIR, "log.txt")

class AutoClickerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Auto Clicker ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç F1,F2,F3")
        self.root.geometry("400x480")
        self.root.resizable(False, False)

        # ‡∏à‡∏∏‡∏î * (F1)
        self.star_point = None
        # ‡∏à‡∏∏‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î (F2)
        self.multi_points = []

        # Delay ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        self.delay_var = tk.DoubleVar(value=0.3)
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß F3
        self.speed_f3_var = tk.DoubleVar(value=1.0)
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        self.is_loop_mode = tk.BooleanVar(value=False)

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        self.enabled_funcs = []
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        self.active_funcs = []

        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á F1,F2
        self.running_f1f2 = False
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á F3
        self.running_f3 = False
        self.f3_stop_flag = threading.Event()
        self.f3_thread = None
        self.is_recording = False

        # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        self.mouse_events = []
        self.mouse_listener = None

        self.create_widgets()
        self.load_log()

        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á keyboard
        self.keyboard_listener = keyboard.Listener(on_press=self.on_key_press)
        self.keyboard_listener.start()

    def create_widgets(self):
        pad = 10

        f1f2_frame = ttk.LabelFrame(self.root, text="(Auto Click)")
        f1f2_frame.pack(fill="x", padx=pad, pady=(pad, 5))

        self.star_label = ttk.Label(f1f2_frame, text="‡∏à‡∏∏‡∏î * (F1): ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏£‡πå‡∏Ñ")
        self.star_label.pack(anchor="w", padx=pad, pady=(5, 2))

        self.multi_label = ttk.Label(f1f2_frame, text="‡∏à‡∏∏‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î (F2): ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∏‡∏î")
        self.multi_label.pack(anchor="w", padx=pad, pady=(0, 5))

        ttk.Label(f1f2_frame, text="Delay ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ):").pack(anchor="w", padx=pad)
        self.delay_entry = ttk.Entry(f1f2_frame, textvariable=self.delay_var, width=10)
        self.delay_entry.pack(anchor="w", padx=pad, pady=(0, 5))

        self.loop_check = ttk.Checkbutton(f1f2_frame, text="‡∏ß‡∏ô‡∏•‡∏π‡∏õ üîÑÔ∏è", variable=self.is_loop_mode)
        self.loop_check.pack(anchor="w", padx=pad, pady=(0, 5))

        f3_frame = ttk.LabelFrame(self.root, text="‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô F3 (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå)")
        f3_frame.pack(fill="x", padx=pad, pady=5)

        ttk.Label(f3_frame, text="‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß F3 (‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ üî∂‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πàüî∂):").pack(anchor="w", padx=pad)
        self.speed_f3_slider = ttk.Scale(f3_frame, variable=self.speed_f3_var, from_=0.1, to=5.0, orient=tk.HORIZONTAL)
        self.speed_f3_slider.pack(fill="x", padx=pad, pady=(0, 5))

        self.record_label = ttk.Label(f3_frame, text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå")
        self.record_label.pack(anchor="w", padx=pad, pady=(0, 5))

        status_frame = ttk.LabelFrame(self.root, text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")
        status_frame.pack(fill="x", padx=pad, pady=5)

        self.status_label = ttk.Label(status_frame, text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡∏Å‡∏î Spacebar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î)", foreground="blue")
        self.status_label.pack(anchor="center", padx=pad, pady=10)

        info_frame = ttk.Frame(self.root)
        info_frame.pack(fill="x", padx=pad, pady=(5, pad))

        tk.Label(info_frame,
                 text="‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°: F1 = ‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡∏à‡∏∏‡∏î *, F2 = ‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡∏à‡∏∏‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î, F3 = ‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏≤‡∏™‡πå, Spacebar = ‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô, Alt = ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï",
                 wraplength=380, justify="left").pack(anchor="w")

    def update_labels(self):
        if self.star_point:
            self.star_label.config(text=f"‡∏à‡∏∏‡∏î * (F1): ({self.star_point[0]}, {self.star_point[1]})")
        else:
            self.star_label.config(text="‡∏à‡∏∏‡∏î * (F1): ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏£‡πå‡∏Ñ")

        if self.multi_points:
            pts = ", ".join([f"({x},{y})" for x, y in self.multi_points])
            self.multi_label.config(text=f"‡∏à‡∏∏‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î (F2): {pts}")
        else:
            self.multi_label.config(text="‡∏à‡∏∏‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î (F2): ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∏‡∏î")

        if self.is_recording:
            self.record_label.config(text=f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå... ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: {len(self.mouse_events)}")
        else:
            if len(self.mouse_events) > 0:
                self.record_label.config(text=f"‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: {len(self.mouse_events)}")
            else:
                self.record_label.config(text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå")

    def save_log(self):
        try:
            os.makedirs(LOG_DIR, exist_ok=True)
            with open(LOG_FILE, "w", encoding="utf-8") as f:
                f.write(f"delay={self.delay_var.get()}\n")
                f.write(f"loop_mode={self.is_loop_mode.get()}\n")
                f.write(f"speed_f3={self.speed_f3_var.get()}\n")
                if self.star_point:
                    f.write(f"star={self.star_point[0]},{self.star_point[1]}\n")
                for x, y in self.multi_points:
                    f.write(f"multi={x},{y}\n")
                if self.mouse_events:
                    json_events = json.dumps(self.mouse_events, default=str)
                    f.write(f"mouse_events={json_events}\n")
        except Exception as e:
            messagebox.showerror("Error", f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå log ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")

    def load_log(self):
        if os.path.exists(LOG_FILE):
            try:
                with open(LOG_FILE, "r", encoding="utf-8") as f:
                    lines = f.readlines()
                self.star_point = None
                self.multi_points = []
                self.mouse_events = []
                for line in lines:
                    line = line.strip()
                    if line.startswith("delay="):
                        try:
                            self.delay_var.set(float(line.split("=")[1]))
                        except:
                            pass
                    elif line.startswith("loop_mode="):
                        try:
                            self.is_loop_mode.set(line.split("=")[1] == "True")
                        except:
                            pass
                    elif line.startswith("speed_f3="):
                        try:
                            self.speed_f3_var.set(float(line.split("=")[1]))
                        except:
                            pass
                    elif line.startswith("star="):
                        parts = line.split("=")[1].split(",")
                        if len(parts) == 2:
                            try:
                                self.star_point = (int(parts[0]), int(parts[1]))
                            except:
                                pass
                    elif line.startswith("multi="):
                        parts = line.split("=")[1].split(",")
                        if len(parts) == 2:
                            try:
                                self.multi_points.append((int(parts[0]), int(parts[1])))
                            except:
                                pass
                    elif line.startswith("mouse_events="):
                        json_str = line[len("mouse_events="):]
                        try:
                            self.mouse_events = json.loads(json_str)
                            for i in range(len(self.mouse_events)):
                                event = self.mouse_events[i]
                                event_type, params, timestamp = event
                                try:
                                    timestamp = float(timestamp)
                                except:
                                    timestamp = 0.0
                                self.mouse_events[i] = (event_type, params, timestamp)
                        except Exception as e:
                            print("‡πÇ‡∏´‡∏•‡∏î mouse_events ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", e)
                self.update_labels()
                if self.star_point or self.multi_points:
                    if 'f1f2' not in self.enabled_funcs:
                        self.enabled_funcs.append('f1f2')
                if self.mouse_events:
                    if 'f3' not in self.enabled_funcs:
                        self.enabled_funcs.append('f3')
            except Exception as e:
                messagebox.showwarning("Warning", f"‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå log ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def reset_all(self):
        # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
        if self.running_f1f2:
            self.running_f1f2 = False
            time.sleep(0.3)
        if self.running_f3:
            self.f3_stop_flag.set()
            self.running_f3 = False
            if self.f3_thread and self.f3_thread.is_alive():
                self.f3_thread.join()
            time.sleep(0.3)
        if self.is_recording:
            self.stop_mouse_record()

        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        self.star_point = None
        self.multi_points.clear()
        self.delay_var.set(0.3)
        self.speed_f3_var.set(1.0)
        self.is_loop_mode.set(False)

        self.mouse_events.clear()
        self.enabled_funcs.clear()
        self.active_funcs.clear()

        self.update_labels()
        self.status_label.config(text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡∏Å‡∏î Spacebar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°)")

        try:
            if os.path.exists(LOG_FILE):
                os.remove(LOG_FILE)
        except Exception as e:
            messagebox.showwarning("Warning", f"‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå log ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

        print("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    def on_key_press(self, key):
        try:
            if key == keyboard.Key.alt_l or key == keyboard.Key.alt_r:
                self.reset_all()
                return

            def add_enabled_func(name):
                if name not in self.enabled_funcs:
                    self.enabled_funcs.append(name)
                    print(f"‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô {name} : {self.enabled_funcs}")

            if key == keyboard.Key.f1:
                x, y = pyautogui.position()
                self.star_point = (x, y)
                self.update_labels()
                self.save_log()
                add_enabled_func('f1f2')
                print(f"‡∏°‡∏≤‡∏£‡πå‡∏Ñ * (F1): ({x}, {y})")

            elif key == keyboard.Key.f2:
                x, y = pyautogui.position()
                self.multi_points.append((x, y))
                self.update_labels()
                self.save_log()
                add_enabled_func('f1f2')
                print(f"‡∏°‡∏≤‡∏£‡πå‡∏Ñ ‡∏à‡∏∏‡∏î F2 ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ({x}, {y})")

            elif key == keyboard.Key.f3:
                if not self.is_recording:
                    self.start_mouse_record()
                else:
                    self.stop_mouse_record()
                add_enabled_func('f3')

            elif key == keyboard.Key.space:
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
                if self.running_f1f2 or self.running_f3 or self.is_recording:
                    self.running_f1f2 = False
                    self.f3_stop_flag.set()
                    self.running_f3 = False
                    if self.f3_thread and self.f3_thread.is_alive():
                        self.f3_thread.join()
                    if self.is_recording:
                        self.stop_mouse_record()
                    self.status_label.config(text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏Å‡∏î Spacebar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°)")
                    print("‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß")
                    return

                if not self.enabled_funcs:
                    messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô F1,F2 ‡∏´‡∏£‡∏∑‡∏≠ F3")
                    return

                self.f3_stop_flag.clear()
                self.active_funcs = self.enabled_funcs.copy()
                threading.Thread(target=self.run_active_funcs, daemon=True).start()
                self.status_label.config(text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà... (‡∏Å‡∏î Spacebar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î)")

        except AttributeError:
            pass

    def run_active_funcs(self):
        for func_name in self.active_funcs:
            if func_name == 'f3':
                # ‡∏£‡∏≠‡πÉ‡∏´‡πâ f1f2 ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
                for prev_func in self.active_funcs[:self.active_funcs.index(func_name)]:
                    if prev_func == 'f1f2' and self.running_f1f2:
                        while self.running_f1f2:
                            if self.f3_stop_flag.is_set():
                                print("‡∏´‡∏¢‡∏∏‡∏î f3 ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠ f1f2")
                                return
                            time.sleep(0.1)

                if not self.mouse_events:
                    messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ")
                    continue

                self.running_f3 = True
                self.f3_thread = threading.Thread(target=self.play_mouse_events)
                self.f3_thread.start()
                self.f3_thread.join()
                self.running_f3 = False

            elif func_name == 'f1f2':
                # ‡∏£‡∏≠‡πÉ‡∏´‡πâ f3 ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
                for prev_func in self.active_funcs[:self.active_funcs.index(func_name)]:
                    if prev_func == 'f3' and self.running_f3:
                        while self.running_f3:
                            if self.f3_stop_flag.is_set():
                                print("‡∏´‡∏¢‡∏∏‡∏î f1f2 ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠ f3")
                                return
                            time.sleep(0.1)

                if not self.star_point or not self.multi_points:
                    messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏∏‡∏î * (F1) ‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î (F2) ‡∏Å‡πà‡∏≠‡∏ô")
                    continue
                self.running_f1f2 = True
                self.run_auto_click_loop()
                self.running_f1f2 = False

        self.status_label.config(text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏Å‡∏î Spacebar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°)")

    def run_auto_click_loop(self):
        delay = self.delay_var.get()
        loop_mode = self.is_loop_mode.get()
        idx = 0
        total_points = len(self.multi_points)
        print(f"‡πÄ‡∏£‡∏¥‡πà‡∏° Auto Click ‡∏î‡πâ‡∏ß‡∏¢ delay {delay} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ, ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥: {loop_mode}")

        if loop_mode:
            while self.running_f1f2:
                # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î *
                pyautogui.click(x=self.star_point[0], y=self.star_point[1], button='left', _pause=False)
                print(f"‡∏Ñ‡∏•‡∏¥‡∏Å * ‡∏ó‡∏µ‡πà ({self.star_point[0]}, {self.star_point[1]})")
                time.sleep(delay)

                # ‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î F2
                point = self.multi_points[idx % total_points]
                pyautogui.click(x=point[0], y=point[1], button='left', _pause=False)
                time.sleep(0.05)
                pyautogui.click(x=point[0], y=point[1], button='left', _pause=False)
                print(f"‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å ‡∏à‡∏∏‡∏î F2 ‡∏ó‡∏µ‡πà ({point[0]}, {point[1]})")
                time.sleep(delay)

                idx += 1
        else:
            for idx in range(total_points):
                if not self.running_f1f2:
                    break

                # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î *
                pyautogui.click(x=self.star_point[0], y=self.star_point[1], button='left', _pause=False)
                print(f"‡∏Ñ‡∏•‡∏¥‡∏Å * ‡∏ó‡∏µ‡πà ({self.star_point[0]}, {self.star_point[1]})")
                time.sleep(delay)

                # ‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î F2
                point = self.multi_points[idx]
                pyautogui.click(x=point[0], y=point[1], button='left', _pause=False)
                time.sleep(0.05)
                pyautogui.click(x=point[0], y=point[1], button='left', _pause=False)
                print(f"‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å ‡∏à‡∏∏‡∏î F2 ‡∏ó‡∏µ‡πà ({point[0]}, {point[1]})")
                time.sleep(delay)

    def start_mouse_record(self):
        self.is_recording = True
        self.mouse_events.clear()
        self.status_label.config(text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå... (‡∏Å‡∏î F3 ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î)")
        self.update_labels()
        print("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå")

        self.record_start_time = time.time()

        def on_move(x, y):
            if not self.is_recording:
                return False
            timestamp = time.time() - self.record_start_time
            self.mouse_events.append(('move', (x, y), timestamp))
            self.update_labels()

        def on_click(x, y, button, pressed):
            if not self.is_recording:
                return False
            timestamp = time.time() - self.record_start_time
            action = 'click_press' if pressed else 'click_release'
            self.mouse_events.append((action, (x, y, button.name), timestamp))
            self.update_labels()

        def on_scroll(x, y, dx, dy):
            if not self.is_recording:
                return False
            timestamp = time.time() - self.record_start_time
            self.mouse_events.append(('scroll', (x, y, dx, dy), timestamp))
            self.update_labels()

        self.mouse_listener = mouse.Listener(
            on_move=on_move,
            on_click=on_click,
            on_scroll=on_scroll)
        self.mouse_listener.start()

    def stop_mouse_record(self):
        self.is_recording = False
        if self.mouse_listener:
            self.mouse_listener.stop()
            self.mouse_listener = None
        self.status_label.config(text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÅ‡∏•‡πâ‡∏ß")
        self.update_labels()
        print(f"‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå, ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå {len(self.mouse_events)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        self.save_log()

    def play_mouse_events(self):
        print("‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ")
        speed = self.speed_f3_var.get()
        if speed < 0.1:
            speed = 0.1
        loop_mode = self.is_loop_mode.get()

        self.f3_stop_flag.clear()

        while self.running_f3 and not self.f3_stop_flag.is_set():
            last_time = 0
            for event in self.mouse_events:
                if self.f3_stop_flag.is_set() or not self.running_f3:
                    print("‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå")
                    break
                event_type, params, timestamp = event

                wait_time = max(0, (timestamp - last_time)) / speed
                if wait_time > 0:
                    time.sleep(wait_time)
                last_time = timestamp

                if event_type == 'move':
                    x, y = params
                    pyautogui.moveTo(x, y, duration=0)
                elif event_type == 'click_press':
                    x, y, button_name = params
                    if button_name == 'left':
                        pyautogui.mouseDown(button='left')
                    elif button_name == 'right':
                        pyautogui.mouseDown(button='right')
                elif event_type == 'click_release':
                    x, y, button_name = params
                    if button_name == 'left':
                        pyautogui.mouseUp(button='left')
                    elif button_name == 'right':
                        pyautogui.mouseUp(button='right')
                elif event_type == 'scroll':
                    x, y, dx, dy = params
                    pyautogui.scroll(dy)

            if not loop_mode:
                break

        self.running_f3 = False
        self.status_label.config(text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏Å‡∏î Spacebar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°)")
        print("‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏™‡∏£‡πá‡∏à")

if __name__ == "__main__":
    root = tk.Tk()
    app = AutoClickerApp(root)
    root.mainloop()
